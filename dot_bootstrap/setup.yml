---
- name: Machine setup
  hosts: localhost
  become: true
  connection: local
  gather_facts: true

  tasks:
    - name: Distribution
      debug: msg="{{ ansible_distribution }}"

    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: Install packages
      ansible.builtin.apt:
        pkg:
          - git
          - htop
          - neovim
          - build-essential
          - curl
          - node
          - npm
          - wget
          - unzip
          - golang-go
          - rust
          - helm
          - ripgrep
          - zsh
          - fzf
          - tmux
          - make
        state: present
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Change shell to zsh
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh

    - name: install prerequisites for Docker repository
      become: yes
      ansible.builtin.apt:
        pkg:
          - ca-certificates
          - curl
          - gnupg2
          - lsb-release
      when: ansible_facts['distribution'] == "Ubuntu"


    - name: add docker apt key
      become: yes
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: add docker apt repo
      become: yes
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes
      when: ansible_facts['distribution'] == "Ubuntu"


    - name: Install Docker
      ansible.builtin.apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        groups: docker
        append: true
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: start and enable docker daemon
      become: yes
      service:
        name: docker
        state: started
        enabled: yes

    - name: start and enable containerd daemon
      become: yes
      service:
        name: containerd
        state: started
        enabled: yes

    - name: Add Google official GPG key
      apt_key:
       url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
       state: present
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Add Google official GPG key for Terraform
      apt_key:
       url: ttps://apt.releases.hashicorp.com/gpg
       state: present
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Add Kubernetes Repository
      apt_repository:
       repo: deb http://apt.kubernetes.io/ kubernetes-xenial main 
       state: present
       filename: kubernetes
       mode: 0600
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install kubectl
      ansible.builtin.apt:
        name: kubectl
        state: present
      when: ansible_facts['distribution'] == "Ubuntu"


    - name: Check if Jetbrains Mono exists
      ansible.builtin.shell: "ls ~{{ remote_regular_user }}/.fonts/JetBrainsMonoNerd*FontMono*"
      register: jetbrains_mono_exists
      ignore_errors: true
      changed_when: false

    - name: Check if Jetbrains Mono exists
      ansible.builtin.shell: "mkdir -p ~{{ remote_regular_user }}/.fonts"

    - name: Download Jetbrains mono
      when: jetbrains_mono_exists is failed
      ansible.builtin.unarchive:
        src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
        dest: "~{{ remote_regular_user }}/.fonts/"
        remote_src: true
        mode: "0755"
        owner: "{{ remote_regular_user }}"
